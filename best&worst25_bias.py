# -*- coding: utf-8 -*-
"""Best&Worst25_Bias

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12mXOzydAL1nkd5YyCNmPqKnf-jjseMbb

# Best and Worst 25 PS4 Games Metacritic

We look at the best 25 games on PS4 on Metacritic by user score with review numbers above 100, therefore small indi games with under 100 games are skipped in the list.  Also note this file is not a notebook therefore it has just been used to extract the level of review bias for each of the 50 games. For an analysis of the games see the results section of the report. Pie charts have been created here, and the code can be examined.

Importing necessary packages:
"""

!pip install tensorflow_text

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

# Import the packages needed for data cleanup and the sentiment analysis:

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
import tensorflow_hub as hub
from tqdm import tqdm
import tensorflow as tf
from tensorflow import keras
import seaborn as sns
import tensorflow_hub as hub
import tensorflow_text
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
import matplotlib.pyplot as plt
from sklearn.preprocessing import OneHotEncoder

"""Loading in Amazon Model"""

model_A = keras.models.load_model("drive/My Drive/AmazonModel.h5")

"""Loading in Metacritic Model"""

model_M = keras.models.load_model("drive/My Drive/MetacriticModel.h5")

"""Load Universal Sentence Encoder for word embeddings:"""

use = hub.load("https://tfhub.dev/google/universal-sentence-encoder/4")

"""-----------------------------------------------------------------------------------------------------------------------------------

# **Best 25 Bias**

# 1) Ghost of Tsushima Bias
"""

df = pd.read_csv("drive/My Drive/csv's/MetacriticDataset/GhostT_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

"""The reviews are then seperated into 3 classes that will be compared against the predictions for the 3 class classification. """

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud data analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

"""Reshape reviews, so that it works with our word embedder. """

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (6471, ))

"""Generate embeddings for the reviews:"""

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

"""Print predictions for each review:"""

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,6471,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,6471,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

"""Add the new columns to the dataframe to compare:"""

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/GTBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/GTBias.csv")
del df['Unnamed: 0']
print(df)

df.biasA.value_counts().plot(kind='pie',title='Ghost of Tsushima Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Ghost of Tsushima Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""-----------------------------------------------------------------------------------------------------------------------------------

# 2) Witcher 3: Wild Hunt
"""

df = pd.read_csv("drive/My Drive/csv's/Best/W3_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (1826, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,1826,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,1826,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/W3Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/W3Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='The Witcher 3: Wild Hunt Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='The Witcher 3: Wild Hunt Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""------------------------------------------------------------------------------------

# 3) The Last of Us Remastered
"""

df = pd.read_csv("drive/My Drive/csv's/Best/TLOUR_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (2415, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,2415,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,2415,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/TLOURBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/TLOURBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='The Last of Us Remastered Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='The Last of Us Remastered Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""------------------------------------------------------------------------------------

# 4) God of War
"""

df = pd.read_csv("drive/My Drive/csv's/Best/GOW_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (3668, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,3668,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,3668,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/GOWBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/GOWBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='God of War Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='God of War Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 5) SpongeBob SquarePants: Battle for Bikini Bottom - Rehydrated
"""

df = pd.read_csv("drive/My Drive/csv's/Best/SBSP_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (701, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,701,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,701,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/SBSPBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/SBSPBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='SpongeBob SquarePants Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='SpongeBob SquarePants Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 6) Resident Evil 2
"""

df = pd.read_csv("drive/My Drive/csv's/Best/RE2_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (709, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,709,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,709,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/RE2Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/RE2Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Resident Evil 2 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Resident Evil 2 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 7) Astro Bot: Rescue Mission
"""

df = pd.read_csv("drive/My Drive/csv's/Best/AB_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (137, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,137,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,137,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/ABBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/ABBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Astro Bot: Rescue Mission Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Astro Bot: Rescue Mission Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 8) NieR: Automata
"""

df = pd.read_csv("drive/My Drive/csv's/Best/NA_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (703, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,703,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,703,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/NABias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/NABias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='NieR Automata Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='NieR Automata Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 9) Bloodborne
"""

df = pd.read_csv("drive/My Drive/csv's/Best/BB_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (1928, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,1928,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,1928,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/BBBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/BBBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Bloodborne Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Bloodborne Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 10) Detroit: Become Human
"""

df = pd.read_csv("drive/My Drive/csv's/Best/DBH_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (1013, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,1013,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,1013,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/DBHBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/DBHBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Detroit: Become Human Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Detroit: Become Human Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 11) Dark Souls III
"""

df = pd.read_csv("drive/My Drive/csv's/Best/DS3_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (464, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,464,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,464,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/DS3Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/DS3Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Dark Souls III Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Dark Souls III Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 12) Dreams
"""

df = pd.read_csv("drive/My Drive/csv's/Best/DREAMS_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (477, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,477,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,477,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/DREAMSBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/DREAMSBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Dreams Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Dreams Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 13) Marvel's Spider-Man
"""

df = pd.read_csv("drive/My Drive/csv's/Best/SM_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (1545, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,1545,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,1545,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/SMBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/SMBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Spider Man Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Spider Man Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 14) Dragon Quest XI
"""

df = pd.read_csv("drive/My Drive/csv's/Best/DQ_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (185, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,185,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,185,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/DQBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/DQBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Dragon Quest XI Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Dragon Quest XI Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 15) Persona 5
"""

df = pd.read_csv("drive/My Drive/csv's/Best/P5_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (897, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,897,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,897,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/P5Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/P5Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Persona 5 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Persona 5 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 16) Life is Strange
"""

df = pd.read_csv("drive/My Drive/csv's/Best/LIS_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (246, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,246,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,246,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/LISBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/LISBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Life is Strange Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Life is Strange Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 17) A Plague Tale: Innocence
"""

df = pd.read_csv("drive/My Drive/csv's/Best/PTI_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (182, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,182,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,182,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/PTIBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/PTIBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='A Plague Tale: Innocence Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='A Plague Tale: Innocence Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 18) The Evil Within 2
"""

df = pd.read_csv("drive/My Drive/csv's/Best/EW2_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (199, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,199,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,199,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/EW2Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/EW2Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='The Evil Within 2 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='The Evil Within 2 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 19) Titanfall 2
"""

df = pd.read_csv("drive/My Drive/csv's/Best/TF2_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (352, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,352,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,352,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/TF2Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/TF2Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Titanfall 2 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Titanfall 2 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 20) Uncharted 4: A Thief's End
"""

df = pd.read_csv("drive/My Drive/csv's/Best/UC4_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (2194, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,2194,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,2194,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/UC4Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/UC4Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Uncharted 4 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Uncharted 4 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 21) Rachet & Clank
"""

df = pd.read_csv("drive/My Drive/csv's/Best/RC_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (363, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,363,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,363,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/RCBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/RCBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Rachet & Clank Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Rachet & Clank Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 22) Uncharted: The Nathan Drake Collection
"""

df = pd.read_csv("drive/My Drive/csv's/Best/UCC_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (338, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,338,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,338,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/UCCBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/UCCBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Uncharted Collection Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Uncharted Collection Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 23) Rocket League
"""

df = pd.read_csv("drive/My Drive/csv's/Best/RL_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (352, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,352,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,352,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/RLBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/RLBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Rocket League Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Rocket League Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 24) Devil May Cry 5
"""

df = pd.read_csv("drive/My Drive/csv's/Best/DMC_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (283, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,283,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,283,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/DMCBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/DMCBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Devil May Cry 5 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Devil May Cry 5 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# 25) Red Dead Redemption 2
"""

df = pd.read_csv("drive/My Drive/csv's/MetacriticDataset/RDR2_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (3338, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,3338,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,3338,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/RDR2Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/RDR2Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Red Dead Redemption 2 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Red Dead Redemption 2 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""----------------------------------------------------------------------------------------------------

# **Worst 25 Bias**

# 1) Madden NFL 21
"""

df = pd.read_csv("drive/My Drive/csv's/Worst/NFL21_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (262, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,262,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,262,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/NFL21Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/NFL21Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='NFL21 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='NFL21 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 2) NBA 2K20"""

df = pd.read_csv("drive/My Drive/csv's/Worst/NBA20_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (557, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,557,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,557,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/NBA20Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/NBA20Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='NBA20 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='NBA20 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 3) FIFA 20"""

df = pd.read_csv("drive/My Drive/csv's/Worst/FIFA20_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (1626, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,1626,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,1626,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/FIFA20Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/FIFA20Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='FIFA 20 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='FIFA 20 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 4) Star Wars Battlefront II (2017)"""

df = pd.read_csv("drive/My Drive/csv's/Worst/BATTLEFRONTII_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (2379, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,2379,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,2379,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/BFIIBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/BFIIBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Battlefront 2 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Battlefront 2 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 5) Metal Gear Survive"""

df = pd.read_csv("drive/My Drive/csv's/Worst/MGS_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (243, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,243,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,243,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/MGSBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/MGSBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Metal Gear Survive Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Metal Gear Survive Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 6) Tony Hawk's Pro Skater 5"""

df = pd.read_csv("drive/My Drive/csv's/Worst/THPS5_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (116, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,116,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,116,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/THPS5Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/THPS5Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Tony Hawks Pro Skater 5 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Tony Hawks Pro Skater 5 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 7) NFL 20"""

df = pd.read_csv("drive/My Drive/csv's/Worst/NFL20_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (318, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,318,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,318,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/NFL20Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/NFL20Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='NFL 20 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='NFL 20 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 8) WWE 2K20"""

df = pd.read_csv("drive/My Drive/csv's/Worst/WWE20_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (130, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,130,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,130,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/WWE20Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/WWE20Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='WWE 20 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='WWE 20 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 9) NBA 2K18"""

df = pd.read_csv("drive/My Drive/csv's/Worst/NBA18_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (240, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,240,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,240,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/NBA18Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/NBA18Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='NBA 18 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='NBA 18 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 10) FIFA 19"""

df = pd.read_csv("drive/My Drive/csv's/Worst/FIFA20_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (1626, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,1626,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,1626,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/FIFA19Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/FIFA19Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='FIFA 19 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='FIFA 19 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""**A look at 20 reviews where Amazon detects bias:**"""

df_bias1 = df[(df['biasA']==1)].reset_index(drop=True)
print(df_bias1)

"""1) **Correct Detection:**"""

print(df_bias1.iloc[10])
print(df_bias1.iloc[10,1])

"""2) **Incorrect Detection:**"""

print(df_bias1.iloc[11])
print(df_bias1.iloc[11,1])

"""3) **Incorrect Detection:**"""

print(df_bias1.iloc[12])
print(df_bias1.iloc[12,1])

"""4) **Correct Detection:** Does not give a reason for negative review"""

print(df_bias1.iloc[13])
print(df_bias1.iloc[13,1])

"""5) **Correct Detection:**"""

print(df_bias1.iloc[14])
print(df_bias1.iloc[14,1])

"""6) **Incorrect Detection:**"""

print(df_bias1.iloc[15])
print(df_bias1.iloc[15,1])

"""7) **Correct Detection:** Review bomber, should remove the review"""

print(df_bias1.iloc[16])
print(df_bias1.iloc[16,1])

"""8) **Correct Detection:**"""

print(df_bias1.iloc[17])
print(df_bias1.iloc[17,1])

"""9) **Correct Detection:**"""

print(df_bias1.iloc[18])
print(df_bias1.iloc[18,1])

"""10) **Incorrect Detection:**"""

print(df_bias1.iloc[19])
print(df_bias1.iloc[19,1])

"""11) **Correct Detection:**"""

print(df_bias1.iloc[20])
print(df_bias1.iloc[20,1])

"""12) **Correct Detection:**"""

print(df_bias1.iloc[21])
print(df_bias1.iloc[21,1])

"""13) **Incorrect Detection:**"""

print(df_bias1.iloc[22])
print(df_bias1.iloc[22,1])

"""14) **Incorrect Detection:**"""

print(df_bias1.iloc[23])
print(df_bias1.iloc[23,1])

"""15) **Incorrect Detection:**"""

print(df_bias1.iloc[24])
print(df_bias1.iloc[24,1])

"""16) **Incorrect Detection:**"""

print(df_bias1.iloc[25])
print(df_bias1.iloc[25,1])

"""17) **Incorrect Detection:**"""

print(df_bias1.iloc[26])
print(df_bias1.iloc[26,1])

"""18) **Correct Detection:**"""

print(df_bias1.iloc[27])
print(df_bias1.iloc[27,1])

"""19) **Incorrect Detection:**"""

print(df_bias1.iloc[28])
print(df_bias1.iloc[28,1])

"""20) **Incorrect Detection:**"""

print(df_bias1.iloc[29])
print(df_bias1.iloc[29,1])

"""9/20 (45%) correct detections of bias here

**A look at 20 reviews where Metacritic detects bias:**
"""

df_bias2 = df[(df['biasM']==1)].reset_index(drop=True)
print(df_bias2)

"""1) **Correct Detection:**"""

print(df_bias2.iloc[40])
print(df_bias2.iloc[40,1])

"""2) **Incorrect Detection:**"""

print(df_bias2.iloc[41])
print(df_bias2.iloc[41,1])

"""3) **Incorrect Detection:**"""

print(df_bias2.iloc[42])
print(df_bias2.iloc[42,1])

"""4) **Incorrect Detection:**"""

print(df_bias2.iloc[43])
print(df_bias2.iloc[43,1])

"""5) **Incorrect Detection:**"""

print(df_bias2.iloc[44])
print(df_bias2.iloc[44,1])

"""6) **Incorrect Detection:**"""

print(df_bias2.iloc[45])
print(df_bias2.iloc[45,1])

"""7) **Incorrect Detection:**"""

print(df_bias2.iloc[46])
print(df_bias2.iloc[46,1])

"""8) **Incorrect Detection:**"""

print(df_bias2.iloc[47])
print(df_bias2.iloc[47,1])

"""9) **Incorrect Detection:**"""

print(df_bias2.iloc[48])
print(df_bias2.iloc[48,1])

"""10) **Incorrect Detection:**"""

print(df_bias2.iloc[49])
print(df_bias2.iloc[49,1])

"""11) **Incorrect Detection:**"""

print(df_bias2.iloc[50])
print(df_bias2.iloc[50,1])

"""12) **Incorrect Detection:** """

print(df_bias2.iloc[51])
print(df_bias2.iloc[51,1])

"""13) **Incorrect Detection:** """

print(df_bias2.iloc[52])
print(df_bias2.iloc[52,1])

"""14) **Incorrect Detection:**"""

print(df_bias2.iloc[53])
print(df_bias2.iloc[53,1])

"""15) **Incorrect Detection:**"""

print(df_bias2.iloc[54])
print(df_bias2.iloc[54,1])

"""16) **Correct Detection:**"""

print(df_bias2.iloc[55])
print(df_bias2.iloc[55,1])

"""17) **Incorrect Detection:**"""

print(df_bias2.iloc[56])
print(df_bias2.iloc[56,1])

"""18) **Incorrect Detection:**"""

print(df_bias2.iloc[57])
print(df_bias2.iloc[57,1])

"""19) **Incorrect Detection:**"""

print(df_bias2.iloc[58])
print(df_bias2.iloc[58,1])

"""20) **Correct Detection:**"""

print(df_bias2.iloc[59])
print(df_bias2.iloc[59,1])

"""There were 3/20 (15%) detections of actual bias

# 11) NFL 19
"""

df = pd.read_csv("drive/My Drive/csv's/Worst/NFL19_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (122, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,122,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,122,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/NFL19Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/NFL19Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='NFL 19 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='NFL 19 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 12) Battlefield V"""

df = pd.read_csv("drive/My Drive/csv's/Worst/BFV_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (770, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,770,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,770,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/BFVBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/BFVBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Battlefield V Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Battlefield V Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 13) NBA 2K19"""

df = pd.read_csv("drive/My Drive/csv's/Worst/NBA19_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (143, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,143,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,143,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/NBA19Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/NBA19Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='NBA 2K19 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='NBA 2K19 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 14) Fallout 76"""

df = pd.read_csv("drive/My Drive/csv's/Worst/FALLOUT76_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (1570, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,1570,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,1570,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/FALLOUT76Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/FALLOUT76Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Fallout 76 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Fallout 76 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 15) Modern Warfare"""

df = pd.read_csv("drive/My Drive/csv's/Worst/MW_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (3928, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,3928,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,3928,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/MWBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/MWBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Modern Warfare Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Modern Warfare Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 16) Anthem"""

df = pd.read_csv("drive/My Drive/csv's/Worst/ANTHEM_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (386, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,386,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,386,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/ANTHEMBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/ANTHEMBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Anthem Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Anthem Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 17) FIFA 18 """

df = pd.read_csv("drive/My Drive/csv's/Worst/FIFA18_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (183, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,183,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,183,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/FIFA18Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/FIFA18Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='FIFA 18 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='FIFA 18 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 18) Street Fighter V"""

df = pd.read_csv("drive/My Drive/csv's/Worst/SFV_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (447, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,447,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,447,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/SFVBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/SFVBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Street Fighter V Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Street Fighter V Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 19) Fortnite"""

df = pd.read_csv("drive/My Drive/csv's/Worst/FORTNITE_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (276, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,276,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,276,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/FORTNITEBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/FORTNITEBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Fortnite Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Fortnite Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 20) Mortal Kombat 11"""

df = pd.read_csv("drive/My Drive/csv's/Worst/MK11_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (750, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,750,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,750,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/MK11Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/MK11Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Mortal Kombat 11 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Mortal Kombat 11 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 21) Call of Duty Ghosts"""

df = pd.read_csv("drive/My Drive/csv's/Worst/GHOSTS_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (349, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,349,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,349,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/GHOSTSBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/GHOSTSBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Call of Duty: Ghosts Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Call of Duty: Ghosts Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 22) Call of Duty: Infinite Warfare"""

df = pd.read_csv("drive/My Drive/csv's/Worst/IW_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (381, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,381,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,381,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/IWBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/IWBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Call of Duty: Infinite Warfare Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Call of Duty: Infinite Warfare Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 23) Call of Duty: Black Ops 4 """

df = pd.read_csv("drive/My Drive/csv's/Worst/BO4_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (504, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,504,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,504,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/BO4Bias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/BO4Bias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Call of Duty: Black Ops 4 Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Call of Duty: Black Ops 4 Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 24) Far Cry: New Dawn"""

df = pd.read_csv("drive/My Drive/csv's/Worst/FCND_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (144, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,144,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,144,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/FCNDBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/FCNDBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Far Cry: New Dawn Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Far Cry: New Dawn Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')

"""# 25) Need for Speed: Payback"""

df = pd.read_csv("drive/My Drive/csv's/Worst/NFSP_reviews.csv")
df = df.dropna()
print(df)
df['rating'].value_counts()

df['review_type'] = df['rating']
df.loc[df['review_type'] == 0.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 1.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 2.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 3.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 4.0, 'review_type'] = "Negative"
df.loc[df['review_type'] == 5.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 6.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 7.0, 'review_type'] = "Average"
df.loc[df['review_type'] == 8.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 9.0, 'review_type'] = "Positive"
df.loc[df['review_type'] == 10.0, 'review_type'] = "Positive"

print(df)
df['review_type'].value_counts()

"""WordCloud Analysis"""

negative_reviews = df[df.review_type == "Negative"]
average_reviews = df[df.review_type == "Average"]
positive_reviews = df[df.review_type == "Positive"]

negative_reviews_text = " ".join(negative_reviews.review.to_numpy().tolist())
average_reviews_text = " ".join(average_reviews.review.to_numpy().tolist())
positive_reviews_text = " ".join(positive_reviews.review.to_numpy().tolist())

negative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(negative_reviews_text)
average_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(average_reviews_text)
positive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color="white").generate(positive_reviews_text)

def show_word_cloud(cloud, title):
  plt.figure(figsize = (16, 10))
  plt.imshow(cloud, interpolation='bilinear')
  plt.title(title)
  plt.axis("off")
  plt.show();

show_word_cloud(negative_reviews_cloud, "Negative reviews common words")

show_word_cloud(average_reviews_cloud, "Average reviews common words")

show_word_cloud(positive_reviews_cloud, "Positive reviews common words")

Game_reviews = pd.DataFrame(df['review'])
Game_reviews = np.array(Game_reviews)
Game_reviews = np.reshape(Game_reviews, (227, ))

Game_emb = []
for r in tqdm(Game_reviews):
  emb = use([r])
  review_emb = tf.reshape(emb, [-1]).numpy()
  Game_emb.append(review_emb)

Game_emb = np.array(Game_emb)

ratingA = []
ratingA.append("Positive")
for i in tqdm(range (1,227,1)):
  pred = model_A.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingA.append("Negative")
  elif pred[0][1] > 0.33:
    ratingA.append("Average")
  else:
    ratingA.append("Positive")

ratingM = []
ratingM.append("Positive")
for i in tqdm(range (1,227,1)):
  pred = model_M.predict(Game_emb[i:i+1])
  if pred[0][0] > 0.33:
    ratingM.append("Negative")
  elif pred[0][1] > 0.33:
    ratingM.append("Average")
  else:
    ratingM.append("Positive")

df["AmazonReviewType"] = ratingA
df["MetacriticReviewType"] = ratingM

df['biasA'] = np.where(df['review_type'] == df['AmazonReviewType'], 0, 1)
df['biasM'] = np.where(df['review_type'] == df['MetacriticReviewType'], 0, 1)

"""We save the new dataframe:"""

df.to_csv("drive/My Drive/csv's/BiasDatasets/NFSPBias.csv")

"""Load the dataframe"""

df = pd.read_csv("drive/My Drive/csv's/BiasDatasets/NFSPBias.csv")
print(df)
del df['Unnamed: 0']
print(list(df))

df.biasA.value_counts().plot(kind='pie',title='Need for Speed: Payback Amazon Model Bias',fontsize=14,autopct='%1.1f%%')

df.biasM.value_counts().plot(kind='pie',title='Need for Speed: Payback Metacritic Model Bias',fontsize=14,autopct='%1.1f%%')